version: '3.8'

services:
  # Infrastructure Services
  
  # PostgreSQL Database
  postgres:
    image: postgres:15.4-alpine
    container_name: intelliflow-postgres-prod
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USERNAME:-intelliflow_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_MULTIPLE_DATABASES:-user_db,transaction_db,fraud_db,analytics_db,notification_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres:/docker-entrypoint-initdb.d
    networks:
      - intelliflow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-intelliflow_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: '1.0'
        reservations:
          memory: 1g
          cpus: '0.5'

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: intelliflow-redis-prod
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - intelliflow-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '0.5'

  # MongoDB for Analytics
  mongodb:
    image: mongo:7.0
    container_name: intelliflow-mongodb-prod
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE:-analytics}
    volumes:
      - mongodb_data:/data/db
    networks:
      - intelliflow-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: '1.0'

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: intelliflow-zookeeper-prod
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - intelliflow-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: '0.5'

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: intelliflow-kafka-prod
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - intelliflow-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server=localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: '1.0'

  # Service Discovery
  eureka-server:
    image: steeltoeoss/eureka-server:3.1.1
    container_name: intelliflow-eureka-prod
    ports:
      - "8761:8761"
    environment:
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
    networks:
      - intelliflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Web UI
  web-ui:
    build:
      context: ../web-ui
      dockerfile: Dockerfile
    container_name: intelliflow-web-ui-prod
    ports:
      - "3000:80"
    environment:
      REACT_APP_API_URL: http://${SERVER_DOMAIN:-localhost}:8081/api/v1
      REACT_APP_ENVIRONMENT: production
    networks:
      - intelliflow-network
    depends_on:
      - user-service
      - transaction-service
      - fraud-detection-service
      - analytics-service
      - notification-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: '0.5'

  # Microservices
  
  # User Service
  user-service:
    build:
      context: ../user-service
      dockerfile: Dockerfile
    container_name: intelliflow-user-service-prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: user_db
      DB_USERNAME: ${DB_USERNAME:-intelliflow_user}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EUREKA_URL: http://eureka-server:8761/eureka
      JWT_SECRET: ${JWT_SECRET}
      SERVER_PORT: 8081
    networks:
      - intelliflow-network
    volumes:
      - user_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '1.0'
        reservations:
          memory: 512m
          cpus: '0.5'

  # Transaction Service
  transaction-service:
    build:
      context: ../transaction-service
      dockerfile: Dockerfile
    container_name: intelliflow-transaction-service-prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: transaction_db
      DB_USERNAME: ${DB_USERNAME:-intelliflow_user}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EUREKA_URL: http://eureka-server:8761/eureka
      SERVER_PORT: 8082
    networks:
      - intelliflow-network
    volumes:
      - transaction_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1.5g
          cpus: '1.0'
        reservations:
          memory: 768m
          cpus: '0.5'

  # Fraud Detection Service
  fraud-detection-service:
    build:
      context: ../fraud-detection-service
      dockerfile: Dockerfile
    container_name: intelliflow-fraud-detection-prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: fraud_db
      DB_USERNAME: ${DB_USERNAME:-intelliflow_user}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EUREKA_URL: http://eureka-server:8761/eureka
      SERVER_PORT: 8083
    networks:
      - intelliflow-network
    volumes:
      - fraud_logs:/app/logs
      - ml_models:/app/models
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: '2.0'
        reservations:
          memory: 1g
          cpus: '1.0'

  # Analytics Service
  analytics-service:
    build:
      context: ../analytics-service
      dockerfile: Dockerfile
    container_name: intelliflow-analytics-service-prod
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: analytics_db
      DB_USERNAME: ${DB_USERNAME:-intelliflow_user}
      DB_PASSWORD: ${DB_PASSWORD}
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      MONGO_DB: analytics
      MONGO_USERNAME: ${MONGO_USERNAME:-admin}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EUREKA_URL: http://eureka-server:8761/eureka
      SERVER_PORT: 8084
    networks:
      - intelliflow-network
    volumes:
      - analytics_logs:/app/logs
      - analytics_reports:/app/reports
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1.5g
          cpus: '1.0'

  # Notification Service
  notification-service:
    build:
      context: ../notification-service
      dockerfile: Dockerfile
    container_name: intelliflow-notification-service-prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    ports:
      - "8085:8085"
    environment:
      SPRING_PROFILES_ACTIVE: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: notification_db
      DB_USERNAME: ${DB_USERNAME:-intelliflow_user}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EUREKA_URL: http://eureka-server:8761/eureka
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SERVER_PORT: 8085
    networks:
      - intelliflow-network
    volumes:
      - notification_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '0.5'

  # Monitoring Services
  
  # Prometheus
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: intelliflow-prometheus-prod
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ../docker/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - intelliflow-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '0.5'

  # Grafana
  grafana:
    image: grafana/grafana:10.1.0
    container_name: intelliflow-grafana-prod
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ../docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - intelliflow-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: '0.5'

  # Reverse Proxy (Nginx)
  nginx:
    image: nginx:alpine
    container_name: intelliflow-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - intelliflow-network
    depends_on:
      - web-ui
      - user-service
      - transaction-service
      - fraud-detection-service
      - analytics-service
      - notification-service
      - grafana
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  intelliflow-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  user_logs:
  transaction_logs:
  fraud_logs:
  analytics_logs:
  analytics_reports:
  notification_logs:
  ml_models:
  prometheus_data:
  grafana_data:
  nginx_logs:
