services:
  # Infrastructure Services
  
  # Service Discovery
  eureka-server:
    image: springcloud/eureka:latest
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
    networks:
      - intelliflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # PostgreSQL Database
  postgres:
    image: postgres:15.4-alpine
    container_name: postgres-db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_MULTIPLE_DATABASES:-user_db,transaction_db,fraud_db,analytics_db,notification_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres:/docker-entrypoint-initdb.d
    networks:
      - intelliflow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    networks:
      - intelliflow-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # MongoDB for Analytics
  mongodb:
    image: mongo:7.0
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-admin123}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE:-analytics}
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb:/docker-entrypoint-initdb.d
    networks:
      - intelliflow-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - intelliflow-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - intelliflow-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server=localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka UI for development
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - intelliflow-network

  # Web UI
  web-ui:
    build:
      context: ./web-ui
      dockerfile: Dockerfile
    container_name: intelliflow-web-ui
    ports:
      - "3001:80"
    environment:
      REACT_APP_API_URL: http://localhost:8081/api/v1
    networks:
      - intelliflow-network
    restart: unless-stopped

  # Microservices
  
  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
# Eureka temporarily disabled
      # eureka-server:
      #   condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: development
      DB_HOST: postgres-db
      DB_PORT: 5432
      DB_NAME: user_db
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      REDIS_HOST: redis-cache
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EUREKA_URL: ${EUREKA_URL:-http://eureka-server:8761/eureka}
      JWT_SECRET: ${JWT_SECRET:-mySecretKeyForJWTTokenGeneration123456789}
    networks:
      - intelliflow-network
    volumes:
      - user_logs:/app/logs
    restart: unless-stopped

  # Transaction Service
  transaction-service:
    build:
      context: ./transaction-service
      dockerfile: Dockerfile
    container_name: transaction-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
# Eureka temporarily disabled
      # eureka-server:
      #   condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: transaction_db
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EUREKA_URL: http://eureka-server:8761/eureka
    networks:
      - intelliflow-network
    volumes:
      - transaction_logs:/app/logs
    restart: unless-stopped

  # Fraud Detection Service
  fraud-detection-service:
    build:
      context: ./fraud-detection-service/src/main/python
      dockerfile: Dockerfile
    container_name: fraud-detection-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
# Eureka temporarily disabled
      # eureka-server:
      #   condition: service_healthy
    ports:
      - "8083:8000"
    environment:
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      LLM_ENABLED: "true"
      OLLAMA_URL: http://ollama:11434
      OLLAMA_MODEL: mistral
      LLM_REQUIRED: "true"
      LLM_FAIL_CLOSED: "true"
      LLM_PASS_THRESHOLD: "0.5"
    networks:
      - intelliflow-network
    volumes:
      - fraud_logs:/app/logs
    restart: unless-stopped

  # Analytics Service
  analytics-service:
    build:
      context: ./analytics-service
      dockerfile: Dockerfile
    container_name: analytics-service
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
# Eureka temporarily disabled
      # eureka-server:
      #   condition: service_healthy
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: analytics_db
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      MONGO_DB: analytics
      MONGO_USERNAME: admin
      MONGO_PASSWORD: admin123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EUREKA_URL: http://eureka-server:8761/eureka
    networks:
      - intelliflow-network
    volumes:
      - analytics_logs:/app/logs
      - analytics_reports:/app/reports
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
# Eureka temporarily disabled
      # eureka-server:
      #   condition: service_healthy
    ports:
      - "8085:8085"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: notification_db
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EUREKA_URL: http://eureka-server:8761/eureka
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
    networks:
      - intelliflow-network
    volumes:
      - notification_logs:/app/logs
      - ./templates:/app/templates
    restart: unless-stopped

  # Development Tools
  
  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - intelliflow-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - intelliflow-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - intelliflow-network

  # Ollama for local LLM serving (Mistral)
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - intelliflow-network
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - intelliflow-network

networks:
  intelliflow-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  user_logs:
  transaction_logs:
  fraud_logs:
  analytics_logs:
  analytics_reports:
  notification_logs:
  prometheus_data:
  grafana_data:
  ollama_data:
