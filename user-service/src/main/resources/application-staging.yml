# IntelliFlow User Service - Staging Environment Configuration

spring:
  profiles:
    active: staging
    include: common

  # Database Configuration
  datasource:
    url: jdbc:postgresql://${DB_HOST:staging-postgres.intelliflow.com}:${DB_PORT:5432}/${DB_NAME:user_db}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    hikari:
      maximum-pool-size: 15
      minimum-idle: 5
      idle-timeout: 600000
      connection-timeout: 30000
      max-lifetime: 1800000
      
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          batch_size: 25
        order_inserts: true
        order_updates: true
        
  # Redis Configuration
  redis:
    host: ${REDIS_HOST:staging-redis.intelliflow.com}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD}
    timeout: 5000ms
    ssl: true
    lettuce:
      pool:
        max-active: 20
        max-wait: 5000ms
        max-idle: 10
        min-idle: 2
        
  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:staging-kafka.intelliflow.com:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 5
      properties:
        linger.ms: 5
        batch.size: 16384
    consumer:
      group-id: user-service-staging
      auto-offset-reset: earliest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.intelliflow.shared.dto

# Server Configuration
server:
  port: 8081
  servlet:
    context-path: /api/v1
  tomcat:
    max-threads: 100
    min-spare-threads: 10
    accept-count: 50
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain

# Management/Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
      probes:
        enabled: true
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5,0.95,0.99
  security:
    enabled: true

# Service Discovery
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URL:http://staging-eureka.intelliflow.com:8761/eureka}
    register-with-eureka: true
    fetch-registry: true
    registry-fetch-interval-seconds: 30
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90

# JWT Configuration
jwt:
  secret: ${JWT_SECRET}
  expiration: ${JWT_EXPIRATION:86400000}
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}

# CORS Configuration
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:https://staging.intelliflow.com,https://staging-admin.intelliflow.com}
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS,HEAD
  allowed-headers: "Authorization,Content-Type,X-Requested-With,Accept,X-Total-Count"
  exposed-headers: "Authorization,Content-Type,X-Total-Count"
  allow-credentials: true

# Logging Configuration
logging:
  level:
    com.intelliflow: INFO
    org.springframework.security: WARN
    org.springframework.web: WARN
    org.hibernate: WARN
    org.apache.kafka: INFO
    root: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
  file:
    name: /app/logs/user-service.log
    max-size: 500MB
    max-history: 60

# Custom Application Configuration
app:
  name: "IntelliFlow User Service"
  version: "1.0.0"
  environment: "staging"
  
  # Rate Limiting
  rate-limit:
    enabled: true
    requests-per-minute: 500
    burst-capacity: 100
    
  # Email Configuration
  email:
    enabled: true
    smtp:
      host: ${MAIL_HOST:smtp-staging.intelliflow.com}
      port: ${MAIL_PORT:587}
      username: ${MAIL_USERNAME}
      password: ${MAIL_PASSWORD}
      auth: true
      starttls: true
    from: ${NOTIFICATION_EMAIL_FROM:staging-noreply@intelliflow.com}
    
  # Password Policy
  password-policy:
    min-length: 8
    require-uppercase: true
    require-lowercase: true
    require-numbers: true
    require-special-chars: false
    
  # Session Configuration
  session:
    timeout-minutes: 30
    max-concurrent-sessions: 3
    
  # Staging-specific features
  debug:
    enabled: false
    api-logging: false
    db-logging: false
    cache-logging: false
    
  # Mock services
  mock:
    enabled: false

# Circuit Breaker Configuration
resilience4j:
  circuitbreaker:
    instances:
      notification-service:
        register-health-indicator: true
        failure-rate-threshold: 60
        minimum-number-of-calls: 10
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 5
        sliding-window-size: 20
        sliding-window-type: COUNT_BASED
      fraud-detection-service:
        register-health-indicator: true
        failure-rate-threshold: 70
        minimum-number-of-calls: 10
        wait-duration-in-open-state: 30s
        
# Retry Configuration
  retry:
    instances:
      database:
        max-attempts: 5
        wait-duration: 2s
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - org.springframework.dao.DataAccessException
          - java.sql.SQLException

# Timeout Configuration
  timelimiter:
    instances:
      notification-service:
        timeout-duration: 10s
        cancel-running-future: true

# Cache Configuration
cache:
  redis:
    ttl:
      user-profile: 600  # 10 minutes
      user-sessions: 1800  # 30 minutes
      permissions: 7200  # 2 hours
    prefix: "staging:user-service:"
    
# Security Configuration
security:
  require-ssl: true
  content-security-policy: "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'"
  frame-options: DENY
  content-type-options: nosniff
  xss-protection: "1; mode=block"

# Monitoring Configuration
monitoring:
  metrics:
    enabled: true
    export-interval: 30s
  tracing:
    enabled: true
    sample-rate: 0.1  # 10% sampling for staging
  health-check:
    interval: 30s
    timeout: 10s